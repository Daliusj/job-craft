from openai import OpenAI
import os

# config
OPENAI_API_KEY_ID = "OPENAI_API"
MODEL = "gpt-4"
MAX_TOKENS = 1000
TEMPERATURE = 0.4
ROLE_SYSTEM = "system"
SYSTEM_CONTENT = (
    "You are computer. You provide all answers in python dictionary format."
)
ROLE_USER = "user"
USER_CONTENT = """You will get job description. Your answer dictionary includes these keys: hard_skills,
 soft_skills, minimum_experience_year, technologies, job_for_programmer.
 In hard_skills and soft_skills write required employee skills mentioned in given job description. Write each skill as seperate list element.
 In minimum_experience_year write integer number of years required for employee, if no years given in words and numbers format write empty string "". 
 In technologies write only the main programming languages, software and web development, data base technologies required for employee to know. Try to write shortest possible answers. If you dont have an answer write empty string "".
 In job_for_programmer write: 1 if job is for web or software developer or enginner. Write 0 if not.
 All symbols in your answer should be ASCII.
 Text: """

GPTPARSER_MESSAGE = {"parse_error": "GptParser.parse: "}


class GptParser:
    """
    The GptParser module leverages the OpenAI GPT-4 model to extract information from job descriptions.
    Extracted information includes hard/soft skills, minimum experience, technologies, and a binary indicator for programmer roles.
    The code handles errors during the parsing process. If an exception occurs, it is caught, and an error message is logged using the provided logger.
    In case of an error, the parse method returns an empty dictionary {}. The error message can be found in the logs generated by the logger.
    """

    def __init__(self, logger) -> None:
        self.logger = logger
        api_key = os.environ.get(OPENAI_API_KEY_ID)
        self.client = OpenAI(api_key=api_key)

    def get_response(self, message: dict):
        response = self.client.chat.completions.create(
            model=MODEL,
            messages=message,
            max_tokens=MAX_TOKENS,
            temperature=TEMPERATURE,
        )
        return response

    def get_message(self, text: int):
        return [
            {"role": ROLE_SYSTEM, "content": SYSTEM_CONTENT},
            {"role": ROLE_USER, "content": f"{USER_CONTENT}, {text}"},
        ]

    def parse(self, text: str):
        try:
            message = self.get_message(text)
            response = self.get_response(message)
            return eval(response.choices[0].message.content)
        except Exception as e:
            self.logger.log(f"{GPTPARSER_MESSAGE['parse_error']}{e}", "ERROR")
